/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ArticuloApp.java
 *
 * Created on 03/11/2012, 14:27:04
 */
package com.app;

import com.entidades.Articulo;
import com.entidades.Tipo;
import com.informes.ArticuloR;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.hibernate.Query;
import org.hibernate.Session;
import util.HibernateUtil;

/**
 *
 * @author Toshiba
 */
public class ArticuloApp extends javax.swing.JDialog {

    /** Creates new form ArticuloApp */
    public ArticuloApp(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        hibernateSession();
        arranque();
        id.setVisible(false);
    }
    private Session st;
    private DefaultTableModel model;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        tipo = new javax.swing.JComboBox();
        des = new javax.swing.JTextField();
        id = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        btnPresentacion = new org.edisoncor.gui.button.ButtonSeven();
        pco = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        pve = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        por = new javax.swing.JTextField();
        can = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        guardar = new org.edisoncor.gui.button.ButtonSeven();
        cancelar = new org.edisoncor.gui.button.ButtonSeven();
        nuevo = new org.edisoncor.gui.button.ButtonSeven();
        editar = new org.edisoncor.gui.button.ButtonSeven();
        eliminar = new org.edisoncor.gui.button.ButtonSeven();
        informe = new org.edisoncor.gui.button.ButtonSeven();

        jLabel10.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel10.setText("Presentacion:");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Descripcion", "Tipo", "P. Venta"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel9.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel9.setText("Agregar Producto");

        jLabel16.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel16.setText("Ingrese la informacion más importante del nuevo producto...");

        des.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel11.setText("Cantidad:");

        btnPresentacion.setBackground(new java.awt.Color(0, 204, 0));
        btnPresentacion.setText("+ Presentación");
        btnPresentacion.setFont(new java.awt.Font("Century Gothic", 1, 10)); // NOI18N
        btnPresentacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPresentacionActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel19.setText("Nombre de producto:");

        jLabel5.setFont(new java.awt.Font("Malayalam MN", 0, 18)); // NOI18N
        jLabel5.setText("Q.");

        pve.setEditable(false);

        jLabel20.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel20.setText("Precio compra:");

        por.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                porFocusLost(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel12.setText("Presentacion:");

        jLabel13.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel13.setText("% ganancia:");

        jLabel21.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel21.setText("Precio venta:");

        jLabel6.setFont(new java.awt.Font("Malayalam MN", 0, 18)); // NOI18N
        jLabel6.setText("Q.");

        guardar.setBackground(new java.awt.Color(0, 204, 0));
        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        cancelar.setBackground(new java.awt.Color(255, 0, 51));
        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        nuevo.setBackground(new java.awt.Color(0, 153, 255));
        nuevo.setText("+ Nuevo");
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });

        editar.setBackground(new java.awt.Color(255, 255, 51));
        editar.setText("Editar");
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });

        eliminar.setBackground(new java.awt.Color(255, 0, 102));
        eliminar.setText("Eliminar");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        informe.setBackground(new java.awt.Color(255, 153, 0));
        informe.setText("Informe");
        informe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                informeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(nuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editar, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(informe, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(informe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel16)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(por, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(can, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabel5)
                                .addGap(11, 11, 11)
                                .addComponent(pco, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 79, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(222, 222, 222))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(des, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(pve, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(tipo, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnPresentacion, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel12))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addComponent(jLabel16)
                        .addGap(4, 4, 4)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(des, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tipo, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnPresentacion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(por, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(can, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(pve, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(pco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void porFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_porFocusLost
        auxiliarCalculoDos();
    }//GEN-LAST:event_porFocusLost

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        retornarArticulo();
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnPresentacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPresentacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPresentacionActionPerformed

    private void desActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_desActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        // TODO add your handling code here:
        guardar();
    }//GEN-LAST:event_guardarActionPerformed

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        // TODO add your handling code here:
        arranque();
    }//GEN-LAST:event_cancelarActionPerformed

    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        // TODO add your handling code here:
        nuevo();
    }//GEN-LAST:event_nuevoActionPerformed

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        // TODO add your handling code here:
        editar();
    }//GEN-LAST:event_editarActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        // TODO add your handling code here:
        eliminar();
    }//GEN-LAST:event_eliminarActionPerformed

    private void informeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_informeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_informeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArticuloApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArticuloApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArticuloApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArticuloApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                ArticuloApp dialog = new ArticuloApp(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.edisoncor.gui.button.ButtonSeven btnPresentacion;
    private javax.swing.JTextField can;
    private org.edisoncor.gui.button.ButtonSeven cancelar;
    private javax.swing.JTextField des;
    private org.edisoncor.gui.button.ButtonSeven editar;
    private org.edisoncor.gui.button.ButtonSeven eliminar;
    private org.edisoncor.gui.button.ButtonSeven guardar;
    private javax.swing.JTextField id;
    private org.edisoncor.gui.button.ButtonSeven informe;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    private org.edisoncor.gui.button.ButtonSeven nuevo;
    private javax.swing.JTextField pco;
    private javax.swing.JTextField por;
    private javax.swing.JTextField pve;
    private javax.swing.JComboBox tipo;
    // End of variables declaration//GEN-END:variables
private void hibernateSession(){
    st = HibernateUtil.getSessionFactory().openSession();
}
private void arranque(){
    cargarCombo();
    this.id.setEnabled(false);
    this.id.setText(null);
    this.des.setEnabled(false);
    this.des.setText(null);
    this.tipo.setSelectedIndex(-1);
    this.tipo.setEnabled(false);
    this.pco.setText(null);
    this.pco.setEnabled(false);
    this.pve.setText(null);
    this.por.setEnabled(false);
    this.por.setText(null);
    this.can.setText("");
    this.can.setEnabled(false);
    
    this.can.setEnabled(false);
    this.guardar.setEnabled(false);
    this.guardar.setText("Guardar");
    this.editar.setEnabled(false);
    this.eliminar.setEnabled(false);
    this.jTable1.setEnabled(true);
    this.nuevo.setEnabled(true);
    tableModel();
    cargarTabla();
    
}
public void tableModel(){
    this.jTable1.getColumnModel().getColumn(0).setPreferredWidth(15);
    this.jTable1.getColumnModel().getColumn(1).setPreferredWidth(200);
    this.jTable1.getColumnModel().getColumn(2).setPreferredWidth(80);
    this.jTable1.getColumnModel().getColumn(3).setPreferredWidth(80);
    model = (DefaultTableModel)this.jTable1.getModel();
    model.setNumRows(0);
}
public void cargarCombo(){
    this.tipo.removeAllItems();
    List<Tipo> lista = (List<Tipo>)st.createQuery("From Tipo").list();
    for(Tipo tipoList : lista){
        this.tipo.addItem(tipoList.getDes());            
    }
}
public void cargarTabla(){
    List<Articulo> lista = (List<Articulo>)st.createQuery("From Articulo").list();
    for(Articulo articuloList : lista){
        model.addRow(new Object[]{
            articuloList.getId(),articuloList.getDes(),articuloList.getTipo().getDes(),articuloList.getPve()});
    }
}
public void nuevo(){
    this.des.setEnabled(true);
    this.des.setText(null);
    this.tipo.setSelectedIndex(-1);
    this.tipo.setEnabled(true);
    this.pco.setText(null);
    this.pco.setEnabled(true);
    this.pve.setText(null);
    this.por.setEnabled(true);
    this.por.setText(null);
    this.can.setText("");
    this.can.setEnabled(true);
    this.guardar.setEnabled(true); 
    this.id.setText("Auto");
    
}
public void guardar(){
    if(this.des.getText().isEmpty()){
        JOptionPane.showMessageDialog(null, "Rellene Descripcion del Artículo.");    
    }
    else{
        if(this.tipo.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(null, "Rellene Tipo de Articulo,");
        }
        else{
            if(this.pco.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Indique el precio de compra.");
            }
            else{
                if(this.por.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null, "Rellene porcentaje de ganancia.");
                }
                else{
                    if(this.pve.getText().isEmpty()){
                        JOptionPane.showMessageDialog(null, "Rellene precio de venta.");
                    }
                    else{
                        if(this.can.getText().isEmpty()){
                            JOptionPane.showMessageDialog(null, "Rellene la cantidad.");
                        }
                        else{
                            if(this.guardar.getText().equals("Guardar")){
                                try {
                                    String desArt = this.des.getText();
                                    Object selectedItem = this.tipo.getSelectedItem();
                                    Tipo retornoTipo = retornoTipo(selectedItem.toString());
                                    int pCompra = 0;
                                    try {
                                        pCompra = Integer.parseInt(this.pco.getText());
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Precio de compra debe ser numérico.");
                                    }
                                    int pVenta = 0;
                                    try {
                                        pVenta = Integer.parseInt(this.pve.getText());
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Precio de venta debe ser numérico.");
                                    }
                                    int porcentaje = 0;
                                    try {
                                        porcentaje = Integer.parseInt(this.por.getText());
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Porcentaje debe ser numérico.");
                                    }
                                    int cantidad = 0;
                                    try {
                                        cantidad = Integer.parseInt(this.can.getText());
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Cantidad debe ser numérico.");
                                    }
                                    st.beginTransaction();
                                    Articulo art = new Articulo();
                                    art.setDes(desArt);
                                    art.setTipo(retornoTipo);
                                    art.setPco(pCompra);
                                    art.setPve(pVenta);
                                    art.setPor(porcentaje);
                                    art.setCan(cantidad);
                                    retornoTipo.getArticulos().add(art);
                                    st.save(art);
                                    st.update(retornoTipo);
                                    st.getTransaction().commit();
                                    JOptionPane.showMessageDialog(null, "Artículo guardado correctamente.");
                                    arranque();
                                } catch (Exception e) {                                    
                                    JOptionPane.showMessageDialog(null, "Error guardando");
                                }
                            }
                            else{
                                String desArt = this.des.getText();
                                    Object selectedItem = this.tipo.getSelectedItem();
                                    Tipo retornoTipo = retornoTipo(selectedItem.toString());
                                    int pCompra = 0;
                                    try {
                                        pCompra = Integer.parseInt(this.pco.getText());
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Precio de compra debe ser numérico.");
                                    }
                                    int pVenta = 0;
                                    try {
                                        pVenta = Integer.parseInt(this.pve.getText());
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Precio de venta debe ser numérico.");
                                    }
                                    int porcentaje = 0;
                                    try {
                                        porcentaje = Integer.parseInt(this.por.getText());
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Porcentaje debe ser numérico.");
                                    }
                                    int cantidad = 0;
                                    try {
                                        cantidad = Integer.parseInt(this.can.getText());
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Cantidad debe ser numérico.");
                                    }
                                    st.beginTransaction();
                                    int parseInt = Integer.parseInt(this.id.getText());
                                    Articulo art =(Articulo) st.load(Articulo.class, parseInt);
                                    art.setDes(desArt);
                                    art.setTipo(retornoTipo);
                                    art.setPco(pCompra);
                                    art.setPve(pVenta);
                                    art.setPor(porcentaje);
                                    art.setCan(cantidad);
                                    retornoTipo.getArticulos().add(art);
                                    st.update(art);
                                    st.update(retornoTipo);
                                    st.getTransaction().commit();
                                    JOptionPane.showMessageDialog(null, "Artículo actualizado correctamente.");
                                    arranque();
                            }
                        }
                    }
                }
            }
        }
    }
}
public Tipo retornoTipo(String desT){
    Tipo tipRet = null;
    String desTipo = desT;
    try {
        Query query = st.createQuery("From Tipo t Where t. des = ?");
        query.setParameter(0, desTipo);
        try {
            tipRet = (Tipo)query.uniqueResult();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Hay más articulos de tipo: " + desTipo);
        }
        
    } catch (Exception e) {
        
    }
    return tipRet;
}

public void auxiliarCalculoDos(){
    int total = 0;
    int pCompra = 0;
    int porcent = 0;
    if(this.pco.getText().isEmpty()){
        JOptionPane.showMessageDialog(null, "No se ha establecido precio de compra.");
        this.pco.setRequestFocusEnabled(true);
    }
    else{
        if(!this.por.getText().isEmpty()){
            try {
                pCompra = Integer.parseInt(this.pco.getText());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,this.pco.getText() + " No es numérico.");
            }
            try {
                porcent = Integer.parseInt(this.por.getText());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,this.por.getText() + " No es numérico.");
            }
            try {
                total = (pCompra + ((pCompra*porcent)/100));
                this.pve.setText(String.valueOf(total));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error: Datos incorrectos.");
            }
            
        }        
    }    
}
public void retornarArticulo(){
    if(this.jTable1.isEnabled()){
        int selectedRow = this.jTable1.getSelectedRow();
        Object valueAt = model.getValueAt(selectedRow, 0);
        int idArt = Integer.parseInt(valueAt.toString());
        Articulo art = (Articulo)st.load(Articulo.class, idArt);
        this.id.setText(String.valueOf(art.getId()));
        this.des.setText(art.getDes());
        this.tipo.setSelectedItem(art.getTipo().getDes());
        this.pco.setText(String.valueOf(art.getPco()));
        this.pve.setText(String.valueOf(art.getPve()));
        this.por.setText(String.valueOf(art.getPor()));
        this.can.setText(String.valueOf(art.getCan()));
        this.editar.setEnabled(true);
        this.eliminar.setEnabled(true);
        this.nuevo.setEnabled(false);
    }    
}
public void editar(){
    this.des.setEnabled(true);
    this.tipo.setEnabled(true);
    this.pco.setEnabled(true);
    this.pve.setEnabled(true);
    this.por.setEnabled(true);
    this.can.setEnabled(true);
    this.guardar.setEnabled(true); 
    this.guardar.setText("Actualizar");
    this.jTable1.setEnabled(false);
    this.eliminar.setEnabled(false);
}
public void eliminar(){
   int showConfirmDialog = JOptionPane.showConfirmDialog(null, "Eliminación de Registro", "Desea eliminar este registro.", JOptionPane.YES_NO_OPTION);
   if(showConfirmDialog == 1){
       JOptionPane.showMessageDialog(null, "Registro no eliminado.");
   }
   else{
       st.beginTransaction();
       int selectedRow = this.jTable1.getSelectedRow();
       Object valueAt = model.getValueAt(selectedRow, 0);
       int idArt = Integer.parseInt(valueAt.toString());
       Articulo art = (Articulo)st.load(Articulo.class, idArt);
       st.delete(art);
       st.getTransaction().commit();
       JOptionPane.showMessageDialog(null, "Registro eliminado.");
       arranque();
   }
}
public void informe(){
    //try - para controlar las excepciones.
    try {               
        //Iniciamos una transacción
        st.beginTransaction();
        //Utilizamos un Lista para almacenar los datos combinados de Articulo y Tipo.
        List articuloList = new ArrayList();
        //Obtenemos una lista de artículos
        List<Articulo> lista = (List<Articulo>)st.createQuery("From Articulo").list();
        //utilizamos Iterator para acceder a los datos
        for (Iterator<Articulo> it = lista.iterator(); it.hasNext();) {
            Articulo articulo = it.next();
            //Llenamos nuestro "articuloList", la diferencia con la lista original es que obtenemos las descripción del tipo con "articulo.getTipo().getDes()"
            //de otra forma no traería un objeto "Tipo" no un String con el nombre específico que necesitamos.
            articuloList.add( new ArticuloR(articulo.getId(), articulo.getDes(), articulo.getTipo().getDes(), articulo.getPve(), articulo.getCan()));
        }         
        //Utilizamos el método siguiente para cargar el reporte "ArticuloReport.jasper"
        //El "JRLoader.loadObject" es el cargador.
        JasperReport report  = (JasperReport)JRLoader.loadObject(ClassLoader.getSystemResource("com/informes/ArticuloReport.jasper")); 
        //El método siguiente nos permite pasarle los datos al reporte utilizando JRBeanCollectionDataSource y como argumento la lista que creamos más arriba.
        //La lista posee los siguiente campos: "id" "des" "tipo" "pve" "can" en coincidencia con los de nuestro archivo de reporte.
        JasperPrint fillReport = JasperFillManager.fillReport(report, null,new JRBeanCollectionDataSource(articuloList));
        //El JasperViewer para visualizar, le pasamos como argumento nuestro "fillReport" de arriba.
        JasperViewer jviewer = new JasperViewer(fillReport,false);
        //Le damos un título al reporte.
        jviewer.setTitle("Lista de Artículos.");
        //La hacemos visible.
        jviewer.setVisible(true);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error cargando reporte.");
    }
}
}
